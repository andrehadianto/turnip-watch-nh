{"version":3,"sources":["components/TurnipGraphChart/index.js","components/AddPriceForm/index.js","components/AddBuyPriceForm/index.js","components/TurnipTable/index.js","components/DateFilter/index.js","containers/main/index.js","store/index.js","containers/app/index.js","serviceWorker.js","index.js"],"names":["connectApp","connect","state","priceChart","buyPrice","dateFilter","useState","data","setData","useEffect","dateArray","i","push","moment","add","format","buy","newData","forEach","date","name","price","minWidth","minHeight","width","height","margin","top","right","bottom","left","type","dataKey","stroke","strokeWidth","strokeDasharray","domain","dataMin","Math","round","dataMax","dispatch","Form","useForm","form","onFinish","values","morningPrice","undefined","afternoonPrice","payload","span","Item","rule","required","style","placeholder","min","block","htmlType","startOf","buyingPrice","picker","dataTable","setDataTable","index","day","key","week","afternoon","bordered","tableLayout","pagination","columns","title","dataIndex","dataSource","label","onChange","value","defaultValue","allowClear","Main","gutter","align","justify","initialState","localStorage","getItem","JSON","parse","store","createStore","action","tmp","Object","assign","setItem","stringify","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yXAgHMA,G,OAAaC,aARK,SAAAC,GACpB,MAAO,CACHC,WAAYD,EAAMC,WAClBC,SAAUF,EAAME,SAChBC,WAAYH,EAAMG,cAIPJ,EAlGM,SAAC,GAA0C,IAAxCE,EAAuC,EAAvCA,WAAYC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,WAAiB,EACvCC,mBAAS,IAD8B,mBACxDC,EADwD,KAClDC,EADkD,KAwD/D,OArDAC,qBAAU,WAEN,IADA,IAAIC,EAAY,GACPC,EAAI,EAAGA,EAAI,EAAGA,IACnBD,EAAUE,KACNC,IAAOR,EAAY,cACdS,IAAIH,EAAG,OACPI,OAAO,eAGpB,IAAMC,EAAMZ,EAASC,GACjBY,EAAU,GACdP,EAAUQ,SAAQ,SAAAC,GACVA,KAAQhB,EACJA,EAAWgB,GAAM,IAAMhB,EAAWgB,GAAM,IACxCF,EAAQL,KAAK,CACTQ,KAAMD,EACNE,MAAOlB,EAAWgB,GAAM,GACxBH,IAAKA,IAETC,EAAQL,KAAK,CACTQ,KAAMD,EACNE,MAAOlB,EAAWgB,GAAM,GACxBH,IAAKA,KAEFb,EAAWgB,GAAM,KAAOhB,EAAWgB,GAAM,IAChDF,EAAQL,KAAK,CACTQ,KAAMD,EACNE,MAAOlB,EAAWgB,GAAM,GACxBH,IAAKA,IAETC,EAAQL,KAAK,CACTQ,KAAMD,EACNH,IAAKA,KAEFb,EAAWgB,GAAM,KAAOhB,EAAWgB,GAAM,KAChDF,EAAQL,KAAK,CACTQ,KAAMD,EACNH,IAAKA,IAETC,EAAQL,KAAK,CACTQ,KAAMD,EACNE,MAAOlB,EAAWgB,GAAM,GACxBH,IAAKA,MAIbC,EAAQL,KAAK,CAAEQ,KAAMD,EAAMH,IAAKA,IAChCC,EAAQL,KAAK,CAAEQ,KAAMD,EAAMH,IAAKA,QAGxCR,EAAQS,KACT,CAACd,EAAYC,EAAUC,IAGtB,kBAAC,IAAD,CAAqBiB,SAAU,IAAKC,UAAW,KAC3C,kBAAC,IAAD,CACIC,MAAO,IACPC,OAAQ,IACRlB,KAAMA,EACNmB,OAAQ,CAAEC,IAAK,EAAGC,MAAO,GAAIC,OAAQ,EAAGC,KAAM,IAE9C,kBAAC,IAAD,CACIC,KAAK,SACLC,QAAQ,QACRC,OAAO,UACPC,YAAa,IAEjB,kBAAC,IAAD,CACIH,KAAK,YACLC,QAAQ,MACRC,OAAO,UACPC,YAAa,IAEjB,kBAAC,IAAD,CAAeD,OAAO,OAAOE,gBAAgB,QAC7C,kBAAC,IAAD,CAAOH,QAAQ,SACf,kBAAC,IAAD,CACII,OAAQ,CACJ,SAAAC,GAAO,OAAIC,KAAKC,MAAgB,GAAVF,IACtB,SAAAG,GAAO,OAAIF,KAAKC,MAAgB,IAAVC,OAG9B,kBAAC,IAAD,Y,mDC/BVxC,G,OAAaC,aARK,SAAAC,GACpB,MAAO,CAAEC,WAAYD,EAAMC,eAGJ,SAAAsC,GACvB,MAAO,CAAEA,cAGMxC,EA9DE,SAAC,GAA6B,EAA3BE,WAA4B,IAAhBsC,EAAe,EAAfA,SAAe,EAChCC,IAAKC,UAAbC,EADwC,oBAa/C,OACI,kBAAC,IAAD,CAAMA,KAAMA,EAAMxB,KAAK,aAAayB,SAXvB,SAAAC,GACb,IAAM3B,EAAO2B,EAAO,eAAe/B,OAAO,cACpCgC,EAAeD,EAAO,uBAAoBE,EAC1CC,EAAiBH,EAAO,yBAAsBE,EACpDP,EAAS,CACLV,KAAM,YACNmB,QAAS,CAAC/B,KAAMA,EAAM4B,aAAcA,EAAcE,eAAgBA,OAMlE,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKE,KAAM,IACP,kBAAC,IAAKC,KAAN,CAAWhC,KAAK,cAAciC,KAAM,CAAC,CAAEC,UAAU,KAC7C,kBAAC,IAAD,CAAYC,MAAO,CAAC/B,MAAM,aAItC,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAK2B,KAAM,IACP,kBAAC,IAAKC,KAAN,CAAWhC,KAAK,iBACZ,kBAAC,IAAD,CAAaoC,YAAY,2BAA2BD,MAAO,CAAC/B,MAAM,OAAQiC,IAAK,MAGvF,kBAAC,IAAD,CAAKN,KAAM,GACP,kBAAC,IAAKC,KAAN,KACI,kBAAC,IAAD,CAAQM,OAAK,EAAC3B,KAAK,UAAU4B,SAAS,UAAtC,UAMZ,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKR,KAAM,IACP,kBAAC,IAAKC,KAAN,CAAWhC,KAAK,mBACZ,kBAAC,IAAD,CAAaoC,YAAY,0BAA0BD,MAAO,CAAC/B,MAAM,OAAQiC,IAAK,MAGtF,kBAAC,IAAD,CAAKN,KAAM,GACP,kBAAC,IAAKC,KAAN,KACI,kBAAC,IAAD,CAAQM,OAAK,EAAC3B,KAAK,UAAU4B,SAAS,UAAtC,eCElB3D,G,OAAaC,aARK,SAAAC,GACpB,MAAO,CAAEE,SAAUF,EAAME,aAGF,SAAAqC,GACvB,MAAO,CAAEA,cAGMxC,EA9CK,SAAC,GAA2B,EAAzBG,SAA0B,IAAhBqC,EAAe,EAAfA,SAAe,EACjCC,IAAKC,UAAbC,EADyC,oBAWhD,OACI,kBAAC,IAAD,CAAMA,KAAMA,EAAMxB,KAAK,aAAayB,SATvB,SAAAC,GACb,IAAM3B,EAAO2B,EAAO,eAAec,QAAQ,QAAQ7C,OAAO,cACpD8C,EAAcf,EAAO,aAC3BL,EAAS,CACLV,KAAM,gBACNmB,QAAS,CAAE/B,KAAMA,EAAM0C,YAAaA,OAKpC,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKV,KAAM,IACP,kBAAC,IAAKC,KAAN,CAAWhC,KAAK,cAAciC,KAAM,CAAC,CAAEC,UAAU,KAC7C,kBAAC,IAAD,CAAYQ,OAAO,OAAOP,MAAO,CAAE/B,MAAO,aAItD,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAK2B,KAAM,IACP,kBAAC,IAAKC,KAAN,CAAWhC,KAAK,YAAYiC,KAAM,CAAC,CAAEC,UAAU,KAC3C,kBAAC,IAAD,CAAaE,YAAY,2BAA2BD,MAAO,CAAE/B,MAAO,OAASiC,IAAK,MAG1F,kBAAC,IAAD,CAAKN,KAAM,GACP,kBAAC,IAAKC,KAAN,KACI,kBAAC,IAAD,CAAQM,OAAK,EAAC3B,KAAK,UAAU4B,SAAS,UAAtC,e,SCuDlB3D,G,OAAaC,aARK,SAAAC,GACpB,MAAO,CACHC,WAAYD,EAAMC,WAClBC,SAAUF,EAAME,SAChBC,WAAYH,EAAMG,cAIPJ,EAlFC,SAAC,GAA0C,IAAxCE,EAAuC,EAAvCA,WAAYC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,WAAiB,EACxBC,mBAAS,IADe,mBACnDyD,EADmD,KACxCC,EADwC,KAG1DvD,qBAAU,WAEN,IADA,IAAIC,EAAY,GACPC,EAAI,EAAGA,EAAI,EAAGA,IACnBD,EAAUE,KACNC,IAAOR,EAAY,cACdS,IAAIH,EAAG,OACPI,OAAO,eAGpB,IAAMC,EAAMZ,EAASC,GAAcD,EAASC,GAAc,IACtDY,EAAU,GACdP,EAAUQ,SAAQ,SAACC,EAAM8C,GACrB,IAAMC,EAAMrD,IAAOM,EAAM,cAAcJ,OAAO,QAC1CI,KAAQhB,EACJA,EAAWgB,GAAM,IAAMhB,EAAWgB,GAAM,GACxCF,EAAQL,KAAK,CACTuD,IAAKF,EACLG,KAAMF,EACNA,IAAK/D,EAAWgB,GAAM,GACtBkD,UAAWlE,EAAWgB,GAAM,GAC5BH,IAAKA,IAEFb,EAAWgB,GAAM,KAAOhB,EAAWgB,GAAM,GAChDF,EAAQL,KAAK,CACTuD,IAAKF,EACLG,KAAMF,EACNA,IAAK/D,EAAWgB,GAAM,GACtBkD,UAAW,IACXrD,IAAKA,IAEFb,EAAWgB,GAAM,KAAOhB,EAAWgB,GAAM,IAChDF,EAAQL,KAAK,CACTuD,IAAKF,EAELG,KAAMF,EACNA,IAAK,IACLG,UAAWlE,EAAWgB,GAAM,GAC5BH,IAAKA,IAIbC,EAAQL,KAAK,CACTuD,IAAKF,EACLG,KAAMF,EACNA,IAAK,IACLG,UAAW,IACXrD,IAAKA,OAIjBgD,EAAa/C,KACd,CAACd,EAAYC,EAAUC,IAS1B,OACI,kBAAC,IAAD,CACIiE,UAAQ,EACRC,YAAY,OACZC,YAAY,EACZC,QAZQ,CACZ,CAAEC,MAAO,OAAQC,UAAW,OAAQR,IAAK,QACzC,CAAEO,MAAO,MAAOC,UAAW,MAAOR,IAAK,OACvC,CAAEO,MAAO,YAAaC,UAAW,YAAaR,IAAK,aACnD,CAAEO,MAAO,MAAOC,UAAW,MAAOR,IAAK,QASnCS,WAAYb,QCxClB/D,G,OAAaC,aARK,SAAAC,GACpB,MAAO,CAAEG,WAAYH,EAAMG,eAGJ,SAAAoC,GACvB,MAAO,CAAEA,cAGMxC,EA7BA,SAAC,GAA8B,IAA5BI,EAA2B,EAA3BA,WAAYoC,EAAe,EAAfA,SAQ9B,OACI,kBAAC,IAAKW,KAAN,CAAWyB,MAAM,eAEb,kBAAC,IAAD,CACIC,SAXK,SAAAC,GACb,IAAM5D,EAAO4D,EAAMnB,QAAQ,QAAQ7C,OAAO,cAC1C0B,EAAS,CACLV,KAAM,kBACNmB,QAAS,CAAE/B,KAAMA,MAQb6D,aAAcnE,IAAOR,EAAY,cACjCyD,OAAO,OACPmB,YAAY,S,2BCVfC,G,OAAO,WAChB,OACI,oCACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAYR,MAAM,yBAEtB,kBAAC,IAAD,CAAKS,OAAQ,CAAC,GAAI,GAAIC,MAAM,SAASC,QAAQ,OACzC,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAMf,UAAU,GACZ,kBAAC,EAAD,SAwBZ,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKnB,KAAM,IACP,kBAAC,IAAD,CAAMmB,UAAU,GACZ,kBAAC,EAAD,SAKZ,kBAAC,IAAD,CAAKa,OAAQ,CAAC,GAAI,KACd,kBAAC,IAAD,CAAKhC,KAAM,GACP,kBAAC,IAAD,CAAMuB,MAAM,4BACR,kBAAC,EAAD,OAEJ,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAMA,MAAM,2BACR,kBAAC,EAAD,QAGR,kBAAC,IAAD,CAAKvB,KAAM,IACP,kBAAC,IAAD,CAAMmB,UAAU,GACZ,kBAAC,EAAD,Y,SC7DlBgB,EAAe,CACjBnF,WAAYoF,aAAaC,QAAQ,cAC3BC,KAAKC,MAAMH,aAAaC,QAAQ,eAChC,GACNpF,SAAUmF,aAAaC,QAAQ,YACzBC,KAAKC,MAAMH,aAAaC,QAAQ,aAChC,GACNnF,WAAYQ,MACP+C,QAAQ,QACR7C,OAAO,eA6CD4E,EAFDC,aAxCE,WAAmC,IAAlC1F,EAAiC,uDAAzBoF,EAAcO,EAAW,uCAC9C,GAAoB,cAAhBA,EAAO9D,KAAsB,CAC7B,IAAI+D,EAAMC,OAAOC,OAAO,GAAI9F,EAAMC,YAClC,OAAI0F,EAAO3C,QAAQ/B,QAAQjB,EAAMC,YACzB0F,EAAO3C,QAAQH,eACf+C,EAAID,EAAO3C,QAAQ/B,MAAM,GAAK0E,EAAO3C,QAAQH,cAE7C8C,EAAO3C,QAAQD,iBACf6C,EAAID,EAAO3C,QAAQ/B,MAAM,GAAK0E,EAAO3C,QAAQD,gBAEjDsC,aAAaU,QAAQ,aAAcR,KAAKS,UAAUJ,IAC3CC,OAAOC,OAAO,GAAI9F,EAAO,CAC5BC,WAAY2F,MAGpBA,EAAID,EAAO3C,QAAQ/B,MAAQ,CACvB0E,EAAO3C,QAAQH,aACf8C,EAAO3C,QAAQD,gBAEnBsC,aAAaU,QAAQ,aAAcR,KAAKS,UAAUJ,IAC3CC,OAAOC,OAAO,GAAI9F,EAAO,CAC5BC,WAAY2F,KAGpB,GAAoB,kBAAhBD,EAAO9D,KAA0B,CACjC,IAAI+D,EAAMC,OAAOC,OAAO,GAAI9F,EAAME,UAGlC,OAFA0F,EAAID,EAAO3C,QAAQ/B,MAAQ0E,EAAO3C,QAAQW,YAC1C0B,aAAaU,QAAQ,WAAYR,KAAKS,UAAUJ,IACzCC,OAAOC,OAAO,GAAI9F,EAAO,CAC5BE,SAAU0F,IAGlB,MAAoB,oBAAhBD,EAAO9D,KACAgE,OAAOC,OAAO,GAAI9F,EAAO,CAC5BG,WAAYwF,EAAO3C,QAAQ/B,OAG5BjB,KCvCIiG,EARH,WACR,OACI,kBAAC,IAAD,CAAUR,MAAOA,GACb,kBAAC,EAAD,QCIQS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3137cd44.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    ResponsiveContainer,\r\n    LineChart,\r\n    Line,\r\n    CartesianGrid,\r\n    XAxis,\r\n    YAxis,\r\n    Tooltip\r\n} from \"recharts\";\r\nimport moment from \"moment\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./styles.scss\";\r\n\r\nconst TurnipGraphChart = ({ priceChart, buyPrice, dateFilter }) => {\r\n    const [data, setData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        let dateArray = [];\r\n        for (let i = 1; i < 7; i++) {\r\n            dateArray.push(\r\n                moment(dateFilter, \"YYYY-MM-DD\")\r\n                    .add(i, \"day\")\r\n                    .format(\"YYYY-MM-DD\")\r\n            );\r\n        }\r\n        const buy = buyPrice[dateFilter];\r\n        let newData = [];\r\n        dateArray.forEach(date => {\r\n            if (date in priceChart) {\r\n                if (priceChart[date][0] && priceChart[date][1]) {\r\n                    newData.push({\r\n                        name: date,\r\n                        price: priceChart[date][0],\r\n                        buy: buy\r\n                    });\r\n                    newData.push({\r\n                        name: date,\r\n                        price: priceChart[date][1],\r\n                        buy: buy\r\n                    });\r\n                } else if (priceChart[date][0] && !priceChart[date][1]) {\r\n                    newData.push({\r\n                        name: date,\r\n                        price: priceChart[date][0],\r\n                        buy: buy\r\n                    });\r\n                    newData.push({\r\n                        name: date,\r\n                        buy: buy\r\n                    });\r\n                } else if (priceChart[date][1] && !priceChart[date][0]) {\r\n                    newData.push({\r\n                        name: date,\r\n                        buy: buy\r\n                    });\r\n                    newData.push({\r\n                        name: date,\r\n                        price: priceChart[date][1],\r\n                        buy: buy\r\n                    });\r\n                }\r\n            } else {\r\n                newData.push({ name: date, buy: buy });\r\n                newData.push({ name: date, buy: buy });\r\n            }\r\n        });\r\n        setData(newData);\r\n    }, [priceChart, buyPrice, dateFilter]);\r\n\r\n    return (\r\n        <ResponsiveContainer minWidth={640} minHeight={480}>\r\n            <LineChart\r\n                width={600}\r\n                height={300}\r\n                data={data}\r\n                margin={{ top: 5, right: 20, bottom: 5, left: 0 }}\r\n            >\r\n                <Line\r\n                    type=\"linear\"\r\n                    dataKey=\"price\"\r\n                    stroke=\"#ff4757\"\r\n                    strokeWidth={1}\r\n                />\r\n                <Line\r\n                    type=\"stepAfter\"\r\n                    dataKey=\"buy\"\r\n                    stroke=\"#2ed573\"\r\n                    strokeWidth={1}\r\n                />\r\n                <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\r\n                <XAxis dataKey=\"name\" />\r\n                <YAxis\r\n                    domain={[\r\n                        dataMin => Math.round(dataMin * 0.9),\r\n                        dataMax => Math.round(dataMax * 1.1)\r\n                    ]}\r\n                />\r\n                <Tooltip />\r\n            </LineChart>\r\n        </ResponsiveContainer>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        priceChart: state.priceChart,\r\n        buyPrice: state.buyPrice,\r\n        dateFilter: state.dateFilter\r\n    };\r\n};\r\n\r\nconst connectApp = connect(mapStateToProps)(TurnipGraphChart);\r\n\r\nexport { connectApp as TurnipGraphChart };\r\n","import React from \"react\";\r\nimport { Row, Col, Form, InputNumber, DatePicker, Button } from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./styles.scss\";\r\n\r\nconst AddPriceForm = ({ priceChart, dispatch }) => {\r\n    const [form] = Form.useForm();\r\n\r\n    const onFinish = values => {\r\n        const date = values[\"date-picker\"].format(\"YYYY-MM-DD\");\r\n        const morningPrice = values[\"morning-price\"] || undefined\r\n        const afternoonPrice = values[\"afternoon-price\"] || undefined\r\n        dispatch({\r\n            type: \"ADD_PRICE\",\r\n            payload: {date: date, morningPrice: morningPrice, afternoonPrice: afternoonPrice}\r\n        })\r\n    };\r\n\r\n    return (\r\n        <Form form={form} name=\"price-form\" onFinish={onFinish}>\r\n            <Row>\r\n                <Col span={24}>\r\n                    <Form.Item name=\"date-picker\" rule={[{ required: true }]}>\r\n                        <DatePicker style={{width:\"100%\"}} />\r\n                    </Form.Item>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col span={18}>\r\n                    <Form.Item name=\"morning-price\">\r\n                        <InputNumber placeholder=\"Turnip price BEFORE 12PM\" style={{width:\"95%\"}} min={0}/>\r\n                    </Form.Item>\r\n                </Col>\r\n                <Col span={6}>\r\n                    <Form.Item>\r\n                        <Button block type=\"primary\" htmlType=\"submit\">\r\n                            Add\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col span={18}>\r\n                    <Form.Item name=\"afternoon-price\">\r\n                        <InputNumber placeholder=\"Turnip price AFTER 12PM\" style={{width:\"95%\"}} min={0}/>\r\n                    </Form.Item>\r\n                </Col>\r\n                <Col span={6}>\r\n                    <Form.Item>\r\n                        <Button block type=\"primary\" htmlType=\"submit\">\r\n                            Add\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Col>\r\n            </Row>\r\n        </Form>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return { priceChart: state.priceChart };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return { dispatch }\r\n}\r\n\r\nconst connectApp = connect(mapStateToProps, mapDispatchToProps)(AddPriceForm);\r\n\r\nexport { connectApp as AddPriceForm };\r\n","import React from \"react\";\r\nimport { Row, Col, Form, InputNumber, Button, DatePicker } from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./styles.scss\";\r\n\r\nconst AddBuyPriceForm = ({ buyPrice, dispatch }) => {\r\n    const [form] = Form.useForm();\r\n\r\n    const onFinish = values => {\r\n        const date = values[\"date-picker\"].startOf('week').format(\"YYYY-MM-DD\");\r\n        const buyingPrice = values[\"buy-price\"];\r\n        dispatch({\r\n            type: \"ADD_BUY_PRICE\",\r\n            payload: { date: date, buyingPrice: buyingPrice }\r\n        });\r\n    };\r\n    return (\r\n        <Form form={form} name=\"price-form\" onFinish={onFinish}>\r\n            <Row>\r\n                <Col span={24}>\r\n                    <Form.Item name=\"date-picker\" rule={[{ required: true }]}>\r\n                        <DatePicker picker=\"week\" style={{ width: \"100%\" }} />\r\n                    </Form.Item>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col span={18}>\r\n                    <Form.Item name=\"buy-price\" rule={[{ required: true }]}>\r\n                        <InputNumber placeholder=\"Turnip price when bought\" style={{ width: \"95%\" }} min={0} />\r\n                    </Form.Item>\r\n                </Col>\r\n                <Col span={6}>\r\n                    <Form.Item>\r\n                        <Button block type=\"primary\" htmlType=\"submit\">\r\n                            Add\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Col>\r\n            </Row>\r\n        </Form>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return { buyPrice: state.buyPrice };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return { dispatch };\r\n};\r\n\r\nconst connectApp = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(AddBuyPriceForm);\r\n\r\nexport { connectApp as AddBuyPriceForm };\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Table } from \"antd\";\r\nimport moment from \"moment\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./styles.scss\";\r\n\r\nconst TurnipTable = ({ priceChart, buyPrice, dateFilter }) => {\r\n    const [dataTable, setDataTable] = useState([]);\r\n\r\n    useEffect(() => {\r\n        let dateArray = [];\r\n        for (let i = 1; i < 7; i++) {\r\n            dateArray.push(\r\n                moment(dateFilter, \"YYYY-MM-DD\")\r\n                    .add(i, \"day\")\r\n                    .format(\"YYYY-MM-DD\")\r\n            );\r\n        }\r\n        const buy = buyPrice[dateFilter] ? buyPrice[dateFilter] : \"-\";\r\n        let newData = [];\r\n        dateArray.forEach((date, index) => {\r\n            const day = moment(date, \"YYYY-MM-DD\").format(\"dddd\");\r\n            if (date in priceChart) {\r\n                if (priceChart[date][0] && priceChart[date][1]) {\r\n                    newData.push({\r\n                        key: index,\r\n                        week: day,\r\n                        day: priceChart[date][0],\r\n                        afternoon: priceChart[date][1],\r\n                        buy: buy\r\n                    });\r\n                } else if (priceChart[date][0] && !priceChart[date][1]) {\r\n                    newData.push({\r\n                        key: index,\r\n                        week: day,\r\n                        day: priceChart[date][0],\r\n                        afternoon: \"-\",\r\n                        buy: buy\r\n                    });\r\n                } else if (priceChart[date][1] && !priceChart[date][0]) {\r\n                    newData.push({\r\n                        key: index,\r\n\r\n                        week: day,\r\n                        day: \"-\",\r\n                        afternoon: priceChart[date][1],\r\n                        buy: buy\r\n                    });\r\n                }\r\n            } else {\r\n                newData.push({\r\n                    key: index,\r\n                    week: day,\r\n                    day: \"-\",\r\n                    afternoon: \"-\",\r\n                    buy: buy\r\n                });\r\n            }\r\n        });\r\n        setDataTable(newData);\r\n    }, [priceChart, buyPrice, dateFilter]);\r\n\r\n    const columns = [\r\n        { title: \"Week\", dataIndex: \"week\", key: \"week\" },\r\n        { title: \"Day\", dataIndex: \"day\", key: \"day\" },\r\n        { title: \"Afternoon\", dataIndex: \"afternoon\", key: \"afternoon\" },\r\n        { title: \"Buy\", dataIndex: \"buy\", key: \"buy\" }\r\n    ];\r\n\r\n    return (\r\n        <Table\r\n            bordered\r\n            tableLayout=\"auto\"\r\n            pagination={false}\r\n            columns={columns}\r\n            dataSource={dataTable}\r\n        />\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        priceChart: state.priceChart,\r\n        buyPrice: state.buyPrice,\r\n        dateFilter: state.dateFilter\r\n    };\r\n};\r\n\r\nconst connectApp = connect(mapStateToProps)(TurnipTable);\r\n\r\nexport { connectApp as TurnipTable };\r\n","import React from \"react\";\r\nimport { Form, DatePicker } from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport moment from \"moment\";\r\nimport \"./styles.scss\";\r\n\r\nconst DateFilter = ({ dateFilter, dispatch }) => {\r\n    const onChange = value => {\r\n        const date = value.startOf('week').format(\"YYYY-MM-DD\");\r\n        dispatch({\r\n            type: \"SET_DATE_FILTER\",\r\n            payload: { date: date }\r\n        });\r\n    };\r\n    return (\r\n        <Form.Item label=\"Date Filter\">\r\n\r\n            <DatePicker\r\n                onChange={onChange}\r\n                defaultValue={moment(dateFilter, \"YYYY-MM-DD\")}\r\n                picker=\"week\"\r\n                allowClear={false}\r\n            />\r\n        </Form.Item>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return { dateFilter: state.dateFilter };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return { dispatch };\r\n};\r\n\r\nconst connectApp = connect(mapStateToProps, mapDispatchToProps)(DateFilter);\r\n\r\nexport { connectApp as DateFilter };\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport { TurnipGraphChart } from \"../../components/TurnipGraphChart\";\r\nimport { AddPriceForm } from \"../../components/AddPriceForm/\";\r\nimport { AddBuyPriceForm } from \"../../components/AddBuyPriceForm\";\r\nimport { TurnipTable } from \"../../components/TurnipTable\";\r\nimport { DateFilter } from \"../../components/DateFilter\";\r\nimport { Row, Col, Statistic, Card, PageHeader, Space } from \"antd\";\r\nimport { ArrowUpOutlined, ArrowDownOutlined } from \"@ant-design/icons\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nexport const Main = () => {\r\n    return (\r\n        <>\r\n            <Row>\r\n                <PageHeader title=\"Turnip Stalk Market\" />\r\n            </Row>\r\n            <Row gutter={[16, 0]} align=\"middle\" justify='end'>\r\n                <Col>\r\n                    <Card bordered={false}>\r\n                        <DateFilter />\r\n                    </Card>\r\n                </Col>\r\n                {/* <Col span={4}>\r\n                    <Card bordered={false}>\r\n                        <Statistic\r\n                            title=\"Current Price\"\r\n                            value={87}\r\n                            suffix={\r\n                                <Statistic\r\n                                    prefix={<ArrowUpOutlined />}\r\n                                    precision={2}\r\n                                    value={1.18}\r\n                                    valueStyle={{\r\n                                        color: \"#3f8600\",\r\n                                        fontSize: \"12px\"\r\n                                    }}\r\n                                    suffix=\"%\"\r\n                                />\r\n                            }\r\n                        />\r\n                    </Card>\r\n                </Col> */}\r\n            </Row>\r\n            <Row>\r\n                <Col span={24}>\r\n                    <Card bordered={false}>\r\n                        <TurnipGraphChart />\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n\r\n            <Row gutter={[16, 24]}>\r\n                <Col span={8}>\r\n                    <Card title=\"Add Turnip Selling Price\">\r\n                        <AddPriceForm />\r\n                    </Card>\r\n                    <Space />\r\n                    <Card title=\"Add Turnip Buying Price\">\r\n                        <AddBuyPriceForm />\r\n                    </Card>\r\n                </Col>\r\n                <Col span={16}>\r\n                    <Card bordered={false}>\r\n                        <TurnipTable />\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n};\r\n","import { createStore } from \"redux\";\r\nimport moment from \"moment\";\r\n\r\nconst initialState = {\r\n    priceChart: localStorage.getItem(\"priceChart\")\r\n        ? JSON.parse(localStorage.getItem(\"priceChart\"))\r\n        : {},\r\n    buyPrice: localStorage.getItem(\"buyPrice\")\r\n        ? JSON.parse(localStorage.getItem(\"buyPrice\"))\r\n        : {},\r\n    dateFilter: moment()\r\n        .startOf(\"week\")\r\n        .format(\"YYYY-MM-DD\")\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    if (action.type === \"ADD_PRICE\") {\r\n        let tmp = Object.assign({}, state.priceChart);\r\n        if (action.payload.date in state.priceChart) {\r\n            if (action.payload.morningPrice) {\r\n                tmp[action.payload.date][0] = action.payload.morningPrice;\r\n            }\r\n            if (action.payload.afternoonPrice) {\r\n                tmp[action.payload.date][1] = action.payload.afternoonPrice;\r\n            }\r\n            localStorage.setItem(\"priceChart\", JSON.stringify(tmp));\r\n            return Object.assign({}, state, {\r\n                priceChart: tmp\r\n            });\r\n        }\r\n        tmp[action.payload.date] = [\r\n            action.payload.morningPrice,\r\n            action.payload.afternoonPrice\r\n        ];\r\n        localStorage.setItem(\"priceChart\", JSON.stringify(tmp));\r\n        return Object.assign({}, state, {\r\n            priceChart: tmp\r\n        });\r\n    }\r\n    if (action.type === \"ADD_BUY_PRICE\") {\r\n        let tmp = Object.assign({}, state.buyPrice);\r\n        tmp[action.payload.date] = action.payload.buyingPrice;\r\n        localStorage.setItem(\"buyPrice\", JSON.stringify(tmp));\r\n        return Object.assign({}, state, {\r\n            buyPrice: tmp\r\n        });\r\n    }\r\n    if (action.type === \"SET_DATE_FILTER\") {\r\n        return Object.assign({}, state, {\r\n            dateFilter: action.payload.date\r\n        });\r\n    }\r\n    return state;\r\n};\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport { Provider } from \"react-redux\";\r\nimport { Main } from \"../main\";\r\nimport store from \"../../store/index\";\r\n\r\nconst App = () => {\r\n    return (\r\n        <Provider store={store}>\r\n            <Main />\r\n        </Provider>\r\n    );\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}